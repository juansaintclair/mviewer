{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { create } from \"apisauce\";\nimport { getGeneralApiProblem } from \"./api-problem\";\nimport { DEFAULT_API_CONFIG } from \"./api-config\";\nexport var Api = function () {\n  function Api() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_API_CONFIG;\n\n    _classCallCheck(this, Api);\n\n    this.config = config;\n  }\n\n  _createClass(Api, [{\n    key: \"setup\",\n    value: function setup() {\n      this.apisauce = create({\n        baseURL: this.config.url,\n        timeout: this.config.timeout,\n        headers: {\n          Accept: \"application/json\"\n        }\n      });\n    }\n  }, {\n    key: \"getUsers\",\n    value: function getUsers() {\n      var response, problem, convertUser, rawUsers, resultUsers;\n      return _regeneratorRuntime.async(function getUsers$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.apisauce.get(\"/users\"));\n\n            case 2:\n              response = _context.sent;\n\n              if (response.ok) {\n                _context.next = 7;\n                break;\n              }\n\n              problem = getGeneralApiProblem(response);\n\n              if (!problem) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", problem);\n\n            case 7:\n              convertUser = function convertUser(raw) {\n                return {\n                  id: raw.id,\n                  name: raw.name\n                };\n              };\n\n              _context.prev = 8;\n              rawUsers = response.data;\n              resultUsers = rawUsers.map(convertUser);\n              return _context.abrupt(\"return\", {\n                kind: \"ok\",\n                users: resultUsers\n              });\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](8);\n              return _context.abrupt(\"return\", {\n                kind: \"bad-data\"\n              });\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[8, 14]], Promise);\n    }\n  }, {\n    key: \"getUser\",\n    value: function getUser(id) {\n      var response, problem, resultUser;\n      return _regeneratorRuntime.async(function getUser$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.apisauce.get(\"/brother/\" + id));\n\n            case 2:\n              response = _context2.sent;\n\n              if (response.ok) {\n                _context2.next = 7;\n                break;\n              }\n\n              problem = getGeneralApiProblem(response);\n\n              if (!problem) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", problem);\n\n            case 7:\n              console.log('retorno da api', response.data);\n              _context2.prev = 8;\n              resultUser = {\n                foto: response.data.foto,\n                nome: response.data.nome,\n                cadastro: response.data.cadastro,\n                loja: response.data.loja,\n                situacao: response.data.situacao\n              };\n              return _context2.abrupt(\"return\", {\n                kind: \"ok\",\n                user: resultUser\n              });\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](8);\n              return _context2.abrupt(\"return\", {\n                kind: \"bad-data\"\n              });\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[8, 13]], Promise);\n    }\n  }]);\n\n  return Api;\n}();","map":{"version":3,"sources":["/Users/juanpimentel/Documents/mviewer/FrontEnd/MasonScan/app/services/api/api.ts"],"names":["create","getGeneralApiProblem","DEFAULT_API_CONFIG","Api","config","apisauce","baseURL","url","timeout","headers","Accept","get","response","ok","problem","convertUser","raw","id","name","rawUsers","data","resultUsers","map","kind","users","console","log","resultUser","foto","nome","cadastro","loja","situacao","user"],"mappings":";;;AAAA,SAA2BA,MAA3B,QAAsD,UAAtD;AACA,SAASC,oBAAT;AACA,SAAoBC,kBAApB;AAMA,WAAaC,GAAb;AAgBE,iBAAoD;AAAA,QAAxCC,MAAwC,uEAApBF,kBAAoB;;AAAA;;AAClD,SAAKE,MAAL,GAAcA,MAAd;AACD;;AAlBH;AAAA;AAAA,WA2BE,iBAAQ;AAEN,WAAKC,QAAL,GAAgBL,MAAM,CAAC;AACrBM,QAAAA,OAAO,EAAE,KAAKF,MAAL,CAAYG,GADA;AAErBC,QAAAA,OAAO,EAAE,KAAKJ,MAAL,CAAYI,OAFA;AAGrBC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE;AADD;AAHY,OAAD,CAAtB;AAOD;AApCH;AAAA;AAAA,WAyCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAE2C,KAAKL,QAAL,CAAcM,GAAd,UAF3C;;AAAA;AAEQC,cAAAA,QAFR;;AAAA,kBAKOA,QAAQ,CAACC,EALhB;AAAA;AAAA;AAAA;;AAMUC,cAAAA,OANV,GAMoBb,oBAAoB,CAACW,QAAD,CANxC;;AAAA,mBAOQE,OAPR;AAAA;AAAA;AAAA;;AAAA,+CAOwBA,OAPxB;;AAAA;AAUQC,cAAAA,WAVR,GAUsB,SAAdA,WAAc,CAACC,GAAD,EAAS;AAC3B,uBAAO;AACLC,kBAAAA,EAAE,EAAED,GAAG,CAACC,EADH;AAELC,kBAAAA,IAAI,EAAEF,GAAG,CAACE;AAFL,iBAAP;AAID,eAfH;;AAAA;AAmBUC,cAAAA,QAnBV,GAmBqBP,QAAQ,CAACQ,IAnB9B;AAoBUC,cAAAA,WApBV,GAoBsCF,QAAQ,CAACG,GAAT,CAAaP,WAAb,CApBtC;AAAA,+CAqBW;AAAEQ,gBAAAA,IAAI,EAAE,IAAR;AAAcC,gBAAAA,KAAK,EAAEH;AAArB,eArBX;;AAAA;AAAA;AAAA;AAAA,+CAuBW;AAAEE,gBAAAA,IAAI,EAAE;AAAR,eAvBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzCF;AAAA;AAAA,WAwEE,iBAAcN,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAE2C,KAAKZ,QAAL,CAAcM,GAAd,eAA8BM,EAA9B,CAF3C;;AAAA;AAEQL,cAAAA,QAFR;;AAAA,kBAKOA,QAAQ,CAACC,EALhB;AAAA;AAAA;AAAA;;AAMUC,cAAAA,OANV,GAMoBb,oBAAoB,CAACW,QAAD,CANxC;;AAAA,mBAOQE,OAPR;AAAA;AAAA;AAAA;;AAAA,gDAOwBA,OAPxB;;AAAA;AAUEW,cAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Bd,QAAQ,CAACQ,IAAvC;AAVF;AAaUO,cAAAA,UAbV,GAamC;AAC7BC,gBAAAA,IAAI,EAAEhB,QAAQ,CAACQ,IAAT,CAAcQ,IADS;AAE7BC,gBAAAA,IAAI,EAAEjB,QAAQ,CAACQ,IAAT,CAAcS,IAFS;AAG7BC,gBAAAA,QAAQ,EAAElB,QAAQ,CAACQ,IAAT,CAAcU,QAHK;AAI7BC,gBAAAA,IAAI,EAAEnB,QAAQ,CAACQ,IAAT,CAAcW,IAJS;AAK7BC,gBAAAA,QAAQ,EAAEpB,QAAQ,CAACQ,IAAT,CAAcY;AALK,eAbnC;AAAA,gDAoBW;AAAET,gBAAAA,IAAI,EAAE,IAAR;AAAcU,gBAAAA,IAAI,EAAEN;AAApB,eApBX;;AAAA;AAAA;AAAA;AAAA,gDAsBW;AAAEJ,gBAAAA,IAAI,EAAE;AAAR,eAtBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxEF;;AAAA;AAAA","sourcesContent":["import { ApisauceInstance, create, ApiResponse } from \"apisauce\"\nimport { getGeneralApiProblem } from \"./api-problem\"\nimport { ApiConfig, DEFAULT_API_CONFIG } from \"./api-config\"\nimport * as Types from \"./api.types\"\n\n/**\n * Manages all requests to the API.\n */\nexport class Api {\n  /**\n   * The underlying apisauce instance which performs the requests.\n   */\n  apisauce: ApisauceInstance\n\n  /**\n   * Configurable options.\n   */\n  config: ApiConfig\n\n  /**\n   * Creates the api.\n   *\n   * @param config The configuration to use.\n   */\n  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {\n    this.config = config\n  }\n\n  /**\n   * Sets up the API.  This will be called during the bootup\n   * sequence and will happen before the first React component\n   * is mounted.\n   *\n   * Be as quick as possible in here.\n   */\n  setup() {\n    // construct the apisauce instance\n    this.apisauce = create({\n      baseURL: this.config.url,\n      timeout: this.config.timeout,\n      headers: {\n        Accept: \"application/json\",\n      },\n    })\n  }\n\n  /**\n   * Gets a list of users.\n   */\n  async getUsers(): Promise<Types.GetUsersResult> {\n    // make the api call\n    const response: ApiResponse<any> = await this.apisauce.get(`/users`)\n\n    // the typical ways to die when calling an api\n    if (!response.ok) {\n      const problem = getGeneralApiProblem(response)\n      if (problem) return problem\n    }\n\n    const convertUser = (raw) => {\n      return {\n        id: raw.id,\n        name: raw.name,\n      }\n    }\n\n    // transform the data into the format we are expecting\n    try {\n      const rawUsers = response.data\n      const resultUsers: Types.User[] = rawUsers.map(convertUser)\n      return { kind: \"ok\", users: resultUsers }\n    } catch {\n      return { kind: \"bad-data\" }\n    }\n  }\n\n  /**\n   * Gets a single user by ID\n   */\n\n  async getUser(id: string): Promise<Types.GetUserResult> {\n    // make the api call\n    const response: ApiResponse<any> = await this.apisauce.get(`/brother/${id}`)\n\n    // the typical ways to die when calling an api\n    if (!response.ok) {\n      const problem = getGeneralApiProblem(response)\n      if (problem) return problem\n    }\n\n    console.log('retorno da api', response.data)\n    // transform the data into the format we are expecting\n    try {\n      const resultUser: Types.User = {\n        foto: response.data.foto,\n        nome: response.data.nome,\n        cadastro: response.data.cadastro,\n        loja: response.data.loja,\n        situacao: response.data.situacao,\n      }\n      return { kind: \"ok\", user: resultUser }\n    } catch {\n      return { kind: \"bad-data\" }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}