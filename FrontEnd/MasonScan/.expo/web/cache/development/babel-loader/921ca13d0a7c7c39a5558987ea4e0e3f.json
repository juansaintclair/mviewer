{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button, Header, Text, Screen, GradientBackground } from \"../../components\";\nimport { color, spacing } from \"../../theme\";\nimport { Api } from \"../../services/api\";\nimport { save } from \"../../utils/storage\";\nvar FULL = {\n  flex: 1\n};\nvar CONTAINER = {\n  backgroundColor: color.transparent,\n  paddingHorizontal: spacing[4]\n};\nvar DEMO = {\n  paddingVertical: spacing[4],\n  paddingHorizontal: spacing[4],\n  backgroundColor: color.palette.deepPurple\n};\nvar BOLD = {\n  fontWeight: \"bold\"\n};\n\nvar DEMO_TEXT = _objectSpread(_objectSpread({}, BOLD), {}, {\n  fontSize: 13,\n  letterSpacing: 2\n});\n\nvar HEADER = {\n  paddingTop: spacing[3],\n  paddingBottom: spacing[5] - 1,\n  paddingHorizontal: 0\n};\n\nvar HEADER_TITLE = _objectSpread(_objectSpread({}, BOLD), {}, {\n  fontSize: 12,\n  lineHeight: 15,\n  textAlign: \"center\",\n  letterSpacing: 1.5\n});\n\nvar TITLE = _objectSpread(_objectSpread({}, BOLD), {}, {\n  fontSize: 28,\n  lineHeight: 38,\n  textAlign: \"center\",\n  marginBottom: spacing[5]\n});\n\nvar TAGLINE = {\n  color: \"#BAB6C8\",\n  fontSize: 15,\n  lineHeight: 22,\n  marginBottom: spacing[4] + spacing[1]\n};\nvar HINT = {\n  color: \"#BAB6C8\",\n  fontSize: 12,\n  lineHeight: 15,\n  marginVertical: spacing[2]\n};\nvar platformCommand = Platform.select({\n  ios: \"Cmd + D\",\n  android: \"Cmd/Ctrl + M\"\n});\nexport var VerifyScreen = observer(function (_ref) {\n  var navigation = _ref.navigation;\n\n  var goBack = function goBack() {\n    return navigation.goBack();\n  };\n\n  var verifyReactotron = React.useMemo(function () {\n    return function _callee() {\n      var verify;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.tron.log(\"Your Friendly tron log message\");\n              console.tron.logImportant(\"I am important\");\n              console.tron.display({\n                name: \"DISPLAY\",\n                value: {\n                  numbers: 1,\n                  strings: \"strings\",\n                  booleans: true,\n                  arrays: [1, 2, 3],\n                  objects: {\n                    deeper: {\n                      deeper: {\n                        yay: \"ðŸ‘¾\"\n                      }\n                    }\n                  },\n                  functionNames: function hello() {}\n                },\n                preview: \"More control with display()\",\n                important: true,\n                image: {\n                  uri: \"https://avatars2.githubusercontent.com/u/3902527?s=200&u=a0d16b13ed719f35d95ca0f4440f5d07c32c349a&v=4\"\n                }\n              });\n              verify = new Api();\n              verify.setup();\n              verify.getUser(\"1\");\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(save(\"Cool Name\", \"Boaty McBoatface\"));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }, []);\n  return React.createElement(View, {\n    testID: \"VerifyScreen\",\n    style: FULL\n  }, React.createElement(GradientBackground, {\n    colors: [\"#422443\", \"#281b34\"]\n  }), React.createElement(Screen, {\n    style: CONTAINER,\n    preset: \"scroll\",\n    backgroundColor: color.transparent\n  }, React.createElement(Header, {\n    headerTx: \"verifyScreen.pageTitle\",\n    leftIcon: \"back\",\n    onLeftPress: goBack,\n    style: HEADER,\n    titleStyle: HEADER_TITLE\n  }), React.createElement(Text, {\n    style: TITLE,\n    preset: \"header\",\n    tx: \"verifyScreen.title\"\n  }), React.createElement(Text, {\n    style: TAGLINE,\n    tx: \"verifyScreen.tagLine\"\n  }), React.createElement(View, null, React.createElement(Button, {\n    style: DEMO,\n    textStyle: DEMO_TEXT,\n    tx: \"verifyScreen.reactotron\",\n    onPress: verifyReactotron\n  }), React.createElement(Text, {\n    style: HINT,\n    tx: \"verifyScreen.\" + Platform.OS + \"ReactotronHint\"\n  }))));\n});","map":{"version":3,"sources":["/Users/juanpimentel/Documents/mviewer/FrontEnd/MasonScan/app/screens/verify/verify-screen.tsx"],"names":["React","observer","Button","Header","Text","Screen","GradientBackground","color","spacing","Api","save","FULL","flex","CONTAINER","backgroundColor","transparent","paddingHorizontal","DEMO","paddingVertical","palette","deepPurple","BOLD","fontWeight","DEMO_TEXT","fontSize","letterSpacing","HEADER","paddingTop","paddingBottom","HEADER_TITLE","lineHeight","textAlign","TITLE","marginBottom","TAGLINE","HINT","marginVertical","platformCommand","Platform","select","ios","android","VerifyScreen","navigation","goBack","verifyReactotron","useMemo","console","tron","log","logImportant","display","name","value","numbers","strings","booleans","arrays","objects","deeper","yay","functionNames","hello","preview","important","image","uri","verify","setup","getUser","OS"],"mappings":"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","sourcesContent":["import React, { FC } from \"react\"\nimport { Platform, TextStyle, View, ViewStyle } from \"react-native\"\nimport { StackScreenProps } from \"@react-navigation/stack\"\nimport { observer } from \"mobx-react-lite\"\nimport {\n  Button,\n  Header,\n  Text,\n  Screen,\n  GradientBackground,\n} from \"../../components\"\nimport { NavigatorParamList } from \"../../navigators\"\nimport { color, spacing } from \"../../theme\"\nimport { Api } from \"../../services/api\"\nimport { save } from \"../../utils/storage\"\n\nconst FULL: ViewStyle = { flex: 1 }\nconst CONTAINER: ViewStyle = {\n  backgroundColor: color.transparent,\n  paddingHorizontal: spacing[4],\n}\nconst DEMO: ViewStyle = {\n  paddingVertical: spacing[4],\n  paddingHorizontal: spacing[4],\n  backgroundColor: color.palette.deepPurple,\n}\nconst BOLD: TextStyle = { fontWeight: \"bold\" }\nconst DEMO_TEXT: TextStyle = {\n  ...BOLD,\n  fontSize: 13,\n  letterSpacing: 2,\n}\nconst HEADER: TextStyle = {\n  paddingTop: spacing[3],\n  paddingBottom: spacing[5] - 1,\n  paddingHorizontal: 0,\n}\nconst HEADER_TITLE: TextStyle = {\n  ...BOLD,\n  fontSize: 12,\n  lineHeight: 15,\n  textAlign: \"center\",\n  letterSpacing: 1.5,\n}\nconst TITLE: TextStyle = {\n  ...BOLD,\n  fontSize: 28,\n  lineHeight: 38,\n  textAlign: \"center\",\n  marginBottom: spacing[5],\n}\nconst TAGLINE: TextStyle = {\n  color: \"#BAB6C8\",\n  fontSize: 15,\n  lineHeight: 22,\n  marginBottom: spacing[4] + spacing[1],\n}\nconst HINT: TextStyle = {\n  color: \"#BAB6C8\",\n  fontSize: 12,\n  lineHeight: 15,\n  marginVertical: spacing[2],\n}\n\nconst platformCommand = Platform.select({\n  ios: \"Cmd + D\",\n  android: \"Cmd/Ctrl + M\",\n})\n\nexport const VerifyScreen: FC<StackScreenProps<NavigatorParamList, \"verify\">> = observer(\n  ({ navigation }) => {\n    const goBack = () => navigation.goBack()\n\n    const verifyReactotron = React.useMemo(\n      () => async () => {\n        console.tron.log(\"Your Friendly tron log message\")\n        console.tron.logImportant(\"I am important\")\n        console.tron.display({\n          name: \"DISPLAY\",\n          value: {\n            numbers: 1,\n            strings: \"strings\",\n            booleans: true,\n            arrays: [1, 2, 3],\n            objects: {\n              deeper: {\n                deeper: {\n                  yay: \"ðŸ‘¾\",\n                },\n              },\n            },\n            functionNames: function hello() {\n              /* dummy function */\n            },\n          },\n          preview: \"More control with display()\",\n          important: true,\n          image: {\n            uri:\n              \"https://avatars2.githubusercontent.com/u/3902527?s=200&u=a0d16b13ed719f35d95ca0f4440f5d07c32c349a&v=4\",\n          },\n        })\n        // make an API call for the demo\n        // Don't do API like this, use store's API\n        const verify = new Api()\n        verify.setup()\n        verify.getUser(\"1\")\n        // Let's do some async storage stuff\n        await save(\"Cool Name\", \"Boaty McBoatface\")\n      },\n      [],\n    )\n\n    return (\n      <View testID=\"VerifyScreen\" style={FULL}>\n        <GradientBackground colors={[\"#422443\", \"#281b34\"]} />\n        <Screen style={CONTAINER} preset=\"scroll\" backgroundColor={color.transparent}>\n          <Header\n            headerTx=\"verifyScreen.pageTitle\"\n            leftIcon=\"back\"\n            onLeftPress={goBack}\n            style={HEADER}\n            titleStyle={HEADER_TITLE}\n          />\n          <Text style={TITLE} preset=\"header\" tx=\"verifyScreen.title\" />\n          <Text style={TAGLINE} tx=\"verifyScreen.tagLine\" />\n          \n          <View>\n            <Button\n              style={DEMO}\n              textStyle={DEMO_TEXT}\n              tx=\"verifyScreen.reactotron\"\n              onPress={verifyReactotron}\n            />\n            <Text style={HINT} tx={`verifyScreen.${Platform.OS}ReactotronHint` as const} />\n          </View>\n        </Screen>\n      </View>\n    )\n  },\n)\n"]},"metadata":{},"sourceType":"module"}