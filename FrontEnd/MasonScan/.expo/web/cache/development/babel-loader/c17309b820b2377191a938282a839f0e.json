{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React from \"react\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { NavigationContainer, DefaultTheme, DarkTheme } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { WelcomeScreen, DemoScreen, DemoListScreen, VerifyScreen, BrotherListScreen } from \"../screens\";\nimport { navigationRef } from \"./navigation-utilities\";\nvar Stack = createNativeStackNavigator();\n\nvar AppStack = function AppStack() {\n  return React.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    initialRouteName: \"welcome\"\n  }, React.createElement(Stack.Screen, {\n    name: \"welcome\",\n    component: WelcomeScreen\n  }), React.createElement(Stack.Screen, {\n    name: \"demo\",\n    component: DemoScreen\n  }), React.createElement(Stack.Screen, {\n    name: \"demoList\",\n    component: DemoListScreen\n  }), React.createElement(Stack.Screen, {\n    name: \"verify\",\n    component: VerifyScreen\n  }), React.createElement(Stack.Screen, {\n    name: \"brotherList\",\n    component: BrotherListScreen\n  }));\n};\n\nexport var AppNavigator = function AppNavigator(props) {\n  var colorScheme = useColorScheme();\n  return React.createElement(NavigationContainer, _extends({\n    ref: navigationRef,\n    theme: colorScheme === \"dark\" ? DarkTheme : DefaultTheme\n  }, props), React.createElement(AppStack, null));\n};\nAppNavigator.displayName = \"AppNavigator\";\nvar exitRoutes = [\"welcome\"];\nexport var canExit = function canExit(routeName) {\n  return exitRoutes.includes(routeName);\n};","map":{"version":3,"sources":["/Users/juanpimentel/Documents/mviewer/FrontEnd/MasonScan/app/navigators/app-navigator.tsx"],"names":["React","NavigationContainer","DefaultTheme","DarkTheme","createNativeStackNavigator","WelcomeScreen","DemoScreen","DemoListScreen","VerifyScreen","BrotherListScreen","navigationRef","Stack","AppStack","headerShown","AppNavigator","props","colorScheme","useColorScheme","displayName","exitRoutes","canExit","routeName","includes"],"mappings":";AAMA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,mBAAT,EAA8BC,YAA9B,EAA4CC,SAA5C,QAA6D,0BAA7D;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,cAApC,EAAoDC,YAApD,EAAkEC,iBAAlE;AACA,SAASC,aAAT;AAuBA,IAAMC,KAAK,GAAGP,0BAA0B,EAAxC;;AAEA,IAAMQ,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,SACE,oBAAC,KAAD,CAAO,SAAP;AACE,IAAA,aAAa,EAAE;AACbC,MAAAA,WAAW,EAAE;AADA,KADjB;AAIE,IAAA,gBAAgB,EAAC;AAJnB,KAME,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,SAAnB;AAA6B,IAAA,SAAS,EAAER;AAAxC,IANF,EAOE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,MAAnB;AAA0B,IAAA,SAAS,EAAEC;AAArC,IAPF,EAQE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,UAAnB;AAA8B,IAAA,SAAS,EAAEC;AAAzC,IARF,EASE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,QAAnB;AAA4B,IAAA,SAAS,EAAEC;AAAvC,IATF,EAUE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,aAAnB;AAAiC,IAAA,SAAS,EAAEC;AAA5C,IAVF,CADF;AAcD,CAfD;;AAmBA,OAAO,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAA4B;AACtD,MAAMC,WAAW,GAAGC,cAAc,EAAlC;AACA,SACE,oBAAC,mBAAD;AACE,IAAA,GAAG,EAAEP,aADP;AAEE,IAAA,KAAK,EAAEM,WAAW,KAAK,MAAhB,GAAyBb,SAAzB,GAAqCD;AAF9C,KAGMa,KAHN,GAKE,oBAAC,QAAD,OALF,CADF;AASD,CAXM;AAaPD,YAAY,CAACI,WAAb,GAA2B,cAA3B;AAWA,IAAMC,UAAU,GAAG,CAAC,SAAD,CAAnB;AACA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,SAAD;AAAA,SAAuBF,UAAU,CAACG,QAAX,CAAoBD,SAApB,CAAvB;AAAA,CAAhB","sourcesContent":["/**\n * The app navigator (formerly \"AppNavigator\" and \"MainNavigator\") is used for the primary\n * navigation flows of your app.\n * Generally speaking, it will contain an auth flow (registration, login, forgot password)\n * and a \"main\" flow which the user will use once logged in.\n */\nimport React from \"react\"\nimport { useColorScheme } from \"react-native\"\nimport { NavigationContainer, DefaultTheme, DarkTheme } from \"@react-navigation/native\"\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\"\nimport { WelcomeScreen, DemoScreen, DemoListScreen, VerifyScreen, BrotherListScreen } from \"../screens\"\nimport { navigationRef } from \"./navigation-utilities\"\n\n/**\n * This type allows TypeScript to know what routes are defined in this navigator\n * as well as what properties (if any) they might take when navigating to them.\n *\n * If no params are allowed, pass through `undefined`. Generally speaking, we\n * recommend using your MobX-State-Tree store(s) to keep application state\n * rather than passing state through navigation params.\n *\n * For more information, see this documentation:\n *   https://reactnavigation.org/docs/params/\n *   https://reactnavigation.org/docs/typescript#type-checking-the-navigator\n */\nexport type NavigatorParamList = {\n  welcome: undefined\n  demo: undefined\n  demoList: undefined\n  verify: undefined\n  brotherList: undefined\n}\n\n// Documentation: https://reactnavigation.org/docs/stack-navigator/\nconst Stack = createNativeStackNavigator<NavigatorParamList>()\n\nconst AppStack = () => {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n      }}\n      initialRouteName=\"welcome\"\n    >\n      <Stack.Screen name=\"welcome\" component={WelcomeScreen} />\n      <Stack.Screen name=\"demo\" component={DemoScreen} />\n      <Stack.Screen name=\"demoList\" component={DemoListScreen} />\n      <Stack.Screen name=\"verify\" component={VerifyScreen} />\n      <Stack.Screen name=\"brotherList\" component={BrotherListScreen} />\n    </Stack.Navigator>\n  )\n}\n\ninterface NavigationProps extends Partial<React.ComponentProps<typeof NavigationContainer>> {}\n\nexport const AppNavigator = (props: NavigationProps) => {\n  const colorScheme = useColorScheme()\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n      {...props}\n    >\n      <AppStack />\n    </NavigationContainer>\n  )\n}\n\nAppNavigator.displayName = \"AppNavigator\"\n\n/**\n * A list of routes from which we're allowed to leave the app when\n * the user presses the back button on Android.\n *\n * Anything not on this list will be a standard `back` action in\n * react-navigation.\n *\n * `canExit` is used in ./app/app.tsx in the `useBackButtonHandler` hook.\n */\nconst exitRoutes = [\"welcome\"]\nexport const canExit = (routeName: string) => exitRoutes.includes(routeName)\n"]},"metadata":{},"sourceType":"module"}