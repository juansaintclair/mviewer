{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { types } from \"mobx-state-tree\";\nimport { BrotherModel } from \"../brother/brother\";\nimport { BrotherApi } from \"../../services/api/brother-api\";\nimport { withEnvironment } from \"../extensions/with-environment\";\nexport var BrotherStoreModel = types.model(\"BrotherStore\").props({\n  brothers: types.optional(types.array(BrotherModel), [])\n}).extend(withEnvironment).actions(function (self) {\n  return {\n    saveBrothers: function saveBrothers(BrotherSnapshot) {\n      self.brothers.replace(BrotherSnapshot);\n    }\n  };\n}).actions(function (self) {\n  return {\n    getBrother: function getBrother(id) {\n      var brotherApi, result;\n      return _regeneratorRuntime.async(function getBrother$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              brotherApi = new BrotherApi(self.environment.api);\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(brotherApi.getBrother(id));\n\n            case 3:\n              result = _context.sent;\n\n              if (result.kind === \"ok\") {\n                self.saveBrothers(result.brothers);\n              } else {\n                __DEV__ && console.tron.log(result.kind);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n});\nexport var createBrotherStoreDefaultModel = function createBrotherStoreDefaultModel() {\n  return types.optional(BrotherStoreModel, {});\n};","map":{"version":3,"sources":["/Users/juanpimentel/Documents/mviewer/FrontEnd/MasonScan/app/models/brother-store/brother-store.ts"],"names":["types","BrotherModel","BrotherApi","withEnvironment","BrotherStoreModel","model","props","brothers","optional","array","extend","actions","self","saveBrothers","BrotherSnapshot","replace","getBrother","id","brotherApi","environment","api","result","kind","__DEV__","console","tron","log","createBrotherStoreDefaultModel"],"mappings":";AAAA,SAAgCA,KAAhC,QAA6C,iBAA7C;AACA,SAASC,YAAT;AACA,SAASC,UAAT;AACA,SAASC,eAAT;AAKA,OAAO,IAAMC,iBAAiB,GAAGJ,KAAK,CACnCK,KAD8B,CACxB,cADwB,EAE9BC,KAF8B,CAExB;AACLC,EAAAA,QAAQ,EAAEP,KAAK,CAACQ,QAAN,CAAeR,KAAK,CAACS,KAAN,CAAYR,YAAZ,CAAf,EAA0C,EAA1C;AADL,CAFwB,EAK9BS,MAL8B,CAKvBP,eALuB,EAM9BQ,OAN8B,CAMtB,UAACC,IAAD;AAAA,SAAW;AAClBC,IAAAA,YAAY,EAAE,sBAACC,eAAD,EAAwC;AACpDF,MAAAA,IAAI,CAACL,QAAL,CAAcQ,OAAd,CAAsBD,eAAtB;AACD;AAHiB,GAAX;AAAA,CANsB,EAW9BH,OAX8B,CAWtB,UAACC,IAAD;AAAA,SAAW;AAClBI,IAAAA,UAAU,EAAE,oBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACJC,cAAAA,UADI,GACS,IAAIhB,UAAJ,CAAeU,IAAI,CAACO,WAAL,CAAiBC,GAAhC,CADT;AAAA;AAAA,+CAEWF,UAAU,CAACF,UAAX,CAAsBC,EAAtB,CAFX;;AAAA;AAEJI,cAAAA,MAFI;;AAIV,kBAAIA,MAAM,CAACC,IAAP,KAAgB,IAApB,EAA0B;AACxBV,gBAAAA,IAAI,CAACC,YAAL,CAAkBQ,MAAM,CAACd,QAAzB;AACD,eAFD,MAEO;AACLgB,gBAAAA,OAAO,IAAIC,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBL,MAAM,CAACC,IAAxB,CAAX;AACD;;AARS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADM,GAAX;AAAA,CAXsB,CAA1B;AA4BP,OAAO,IAAMK,8BAA8B,GAAG,SAAjCA,8BAAiC;AAAA,SAAM3B,KAAK,CAACQ,QAAN,CAAeJ,iBAAf,EAAkC,EAAlC,CAAN;AAAA,CAAvC","sourcesContent":["import { Instance, SnapshotOut, types } from \"mobx-state-tree\"\nimport { BrotherModel, BrotherSnapshot } from \"../brother/brother\"\nimport { BrotherApi } from \"../../services/api/brother-api\"\nimport { withEnvironment } from \"../extensions/with-environment\"\n\n/**\n * Example store containing Rick and Morty characters\n */\nexport const BrotherStoreModel = types\n  .model(\"BrotherStore\")\n  .props({\n    brothers: types.optional(types.array(BrotherModel), []),\n  })\n  .extend(withEnvironment)\n  .actions((self) => ({\n    saveBrothers: (BrotherSnapshot: BrotherSnapshot[]) => {\n      self.brothers.replace(BrotherSnapshot)\n    }\n  }))\n  .actions((self) => ({\n    getBrother: async (id) => {\n      const brotherApi = new BrotherApi(self.environment.api)\n      const result = await brotherApi.getBrother(id)\n\n      if (result.kind === \"ok\") {\n        self.saveBrothers(result.brothers)\n      } else {\n        __DEV__ && console.tron.log(result.kind)\n      }\n    },\n  }))\n\ntype BrotherStoreType = Instance<typeof BrotherStoreModel>\nexport interface BrotherStore extends BrotherStoreType {}\ntype BrotherStoreSnapshotType = SnapshotOut<typeof BrotherStoreModel>\nexport interface BrotherStoreSnapshot extends BrotherStoreSnapshotType {}\nexport const createBrotherStoreDefaultModel = () => types.optional(BrotherStoreModel, {})\n"]},"metadata":{},"sourceType":"module"}