{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useLayoutEffect, useState } from \"react\";\nimport RNImage from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function AutoImage(props) {\n  var _useState = useState({\n    width: 0,\n    height: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      imageSize = _useState2[0],\n      setImageSize = _useState2[1];\n\n  useLayoutEffect(function () {\n    var _props$source;\n\n    if ((_props$source = props.source) != null && _props$source.uri) {\n      RNImage.getSize(props.source.uri, function (width, height) {\n        setImageSize({\n          width: width,\n          height: height\n        });\n      });\n    } else if (Platform.OS === \"web\") {\n      RNImage.getSize(props.source, function (width, height) {\n        setImageSize({\n          width: width,\n          height: height\n        });\n      });\n    } else {\n      var _RNImage$resolveAsset = RNImage.resolveAssetSource(props.source),\n          width = _RNImage$resolveAsset.width,\n          height = _RNImage$resolveAsset.height;\n\n      setImageSize({\n        width: width,\n        height: height\n      });\n    }\n  }, []);\n  return React.createElement(RNImage, _extends({}, props, {\n    style: [imageSize, props.style]\n  }));\n}","map":{"version":3,"sources":["/Users/juanpimentel/Documents/mviewer/FrontEnd/MasonScan/app/components/auto-image/auto-image.tsx"],"names":["React","useLayoutEffect","useState","AutoImage","props","width","height","imageSize","setImageSize","source","uri","RNImage","getSize","Platform","OS","resolveAssetSource","style"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,eAAhB,EAAiCC,QAAjC,QAAiD,OAAjD;;;AAyBA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAAsC;AAC3C,kBAAkCF,QAAQ,CAAC;AAAEG,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,MAAM,EAAE;AAApB,GAAD,CAA1C;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AAEAP,EAAAA,eAAe,CAAC,YAAM;AAAA;;AACpB,yBAAIG,KAAK,CAACK,MAAV,aAAI,cAAcC,GAAlB,EAAuB;AACrBC,MAAAA,OAAO,CAACC,OAAR,CAAgBR,KAAK,CAACK,MAAN,CAAaC,GAA7B,EAAyC,UAACL,KAAD,EAAQC,MAAR,EAAmB;AAC1DE,QAAAA,YAAY,CAAC;AAAEH,UAAAA,KAAK,EAALA,KAAF;AAASC,UAAAA,MAAM,EAANA;AAAT,SAAD,CAAZ;AACD,OAFD;AAGD,KAJD,MAIO,IAAIO,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AAEhCH,MAAAA,OAAO,CAACC,OAAR,CAAgBR,KAAK,CAACK,MAAtB,EAAqC,UAACJ,KAAD,EAAQC,MAAR,EAAmB;AACtDE,QAAAA,YAAY,CAAC;AAAEH,UAAAA,KAAK,EAALA,KAAF;AAASC,UAAAA,MAAM,EAANA;AAAT,SAAD,CAAZ;AACD,OAFD;AAGD,KALM,MAKA;AACL,kCAA0BK,OAAO,CAACI,kBAAR,CAA2BX,KAAK,CAACK,MAAjC,CAA1B;AAAA,UAAQJ,KAAR,yBAAQA,KAAR;AAAA,UAAeC,MAAf,yBAAeA,MAAf;;AACAE,MAAAA,YAAY,CAAC;AAAEH,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,MAAM,EAANA;AAAT,OAAD,CAAZ;AACD;AACF,GAdc,EAcZ,EAdY,CAAf;AAgBA,SAAO,oBAAC,OAAD,eAAaF,KAAb;AAAoB,IAAA,KAAK,EAAE,CAACG,SAAD,EAAYH,KAAK,CAACY,KAAlB;AAA3B,KAAP;AACD","sourcesContent":["import React, { useLayoutEffect, useState } from \"react\"\nimport {\n  Image as RNImage,\n  ImageProps as DefaultImageProps,\n  ImageURISource,\n  Platform,\n} from \"react-native\"\n\ntype ImageProps = DefaultImageProps & {\n  source: ImageURISource\n}\n\n/**\n * An Image wrapper component that autosizes itself to the size of the actual image.\n * You can always override by passing a width and height in the style.\n * If passing only one of width/height this image component will use the actual\n * size of the other dimension.\n *\n * This component isn't required, but is provided as a convenience so that\n * we don't have to remember to explicitly set image sizes on every image instance.\n *\n * To use as a stand-in replacement import { AutoImage as Image } and remove the\n * Image import from react-native. Now all images in that file are handled by this\n * component and are web-ready if not explicitly sized in the style property.\n */\nexport function AutoImage(props: ImageProps) {\n  const [imageSize, setImageSize] = useState({ width: 0, height: 0 })\n\n  useLayoutEffect(() => {\n    if (props.source?.uri) {\n      RNImage.getSize(props.source.uri as any, (width, height) => {\n        setImageSize({ width, height })\n      })\n    } else if (Platform.OS === \"web\") {\n      // web requires a different method to get it's size\n      RNImage.getSize(props.source as any, (width, height) => {\n        setImageSize({ width, height })\n      })\n    } else {\n      const { width, height } = RNImage.resolveAssetSource(props.source)\n      setImageSize({ width, height })\n    }\n  }, [])\n\n  return <RNImage {...props} style={[imageSize, props.style]} />\n}\n"]},"metadata":{},"sourceType":"module"}