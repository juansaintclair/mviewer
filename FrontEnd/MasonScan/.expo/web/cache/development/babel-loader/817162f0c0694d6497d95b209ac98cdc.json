{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getGeneralApiProblem } from \"./api-problem\";\nexport var BrotherApi = function () {\n  function BrotherApi(api) {\n    _classCallCheck(this, BrotherApi);\n\n    this.api = api;\n  }\n\n  _createClass(BrotherApi, [{\n    key: \"getBrother\",\n    value: function getBrother(id) {\n      var response, problem, brothers;\n      return _regeneratorRuntime.async(function getBrother$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.api.apisauce.get(\"/brother/\" + id));\n\n            case 3:\n              response = _context.sent;\n\n              if (response.ok) {\n                _context.next = 8;\n                break;\n              }\n\n              problem = getGeneralApiProblem(response);\n\n              if (!problem) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\", problem);\n\n            case 8:\n              brothers = response.data;\n              return _context.abrupt(\"return\", {\n                kind: \"ok\",\n                brothers: brothers\n              });\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              return _context.abrupt(\"return\", {\n                kind: \"bad-data\"\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 12]], Promise);\n    }\n  }]);\n\n  return BrotherApi;\n}();","map":{"version":3,"sources":["/Users/juanpimentel/Documents/mviewer/FrontEnd/MasonScan/app/services/api/brother-api.ts"],"names":["getGeneralApiProblem","BrotherApi","api","id","apisauce","get","response","ok","problem","brothers","data","kind"],"mappings":";;;AAEA,SAASA,oBAAT;AAIA,WAAaC,UAAb;AAGE,sBAAYC,GAAZ,EAAsB;AAAA;;AACpB,SAAKA,GAAL,GAAWA,GAAX;AACD;;AALH;AAAA;AAAA,WAOE,oBAAiBC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAG2C,KAAKD,GAAL,CAASE,QAAT,CAAkBC,GAAlB,eAAkCF,EAAlC,CAH3C;;AAAA;AAGQG,cAAAA,QAHR;;AAAA,kBAMOA,QAAQ,CAACC,EANhB;AAAA;AAAA;AAAA;;AAOUC,cAAAA,OAPV,GAOoBR,oBAAoB,CAACM,QAAD,CAPxC;;AAAA,mBAQQE,OARR;AAAA;AAAA;AAAA;;AAAA,+CAQwBA,OARxB;;AAAA;AAaUC,cAAAA,QAbV,GAaqBH,QAAQ,CAACI,IAb9B;AAAA,+CAeW;AAAEC,gBAAAA,IAAI,EAAE,IAAR;AAAcF,gBAAAA,QAAQ,EAARA;AAAd,eAfX;;AAAA;AAAA;AAAA;AAAA,+CAiBW;AAAEE,gBAAAA,IAAI,EAAE;AAAR,eAjBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPF;;AAAA;AAAA","sourcesContent":["import { ApiResponse } from \"apisauce\"\nimport { Api } from \"./api\"\nimport { getGeneralApiProblem } from \"./api-problem\"\nimport { GetBrothersResult } from \"./api.types\"\n\n\nexport class BrotherApi {\n  private api: Api\n\n  constructor(api: Api) {\n    this.api = api\n  }\n\n  async getBrother(id: string): Promise<GetBrothersResult> {\n    try {\n    // make the api call\n    const response: ApiResponse<any> = await this.api.apisauce.get(`/brother/${id}`)\n\n    // the typical ways to die when calling an api\n    if (!response.ok) {\n      const problem = getGeneralApiProblem(response)\n      if (problem) return problem\n    }\n\n    // transform the data into the format we are expecting\n    \n      const brothers = response.data\n      \n      return { kind: \"ok\", brothers }\n    } catch {\n      return { kind: \"bad-data\" }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}