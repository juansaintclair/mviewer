{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getGeneralApiProblem } from \"./api-problem\";\nexport var BrotherApi = function () {\n  function BrotherApi(api) {\n    _classCallCheck(this, BrotherApi);\n\n    this.api = api;\n  }\n\n  _createClass(BrotherApi, [{\n    key: \"getBrother\",\n    value: function getBrother(id) {\n      var response, problem, brothers;\n      return _regeneratorRuntime.async(function getBrother$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              console.log(\"pr\\xE9 chamada. ID \" + id);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(this.api.apisauce.get(\"/brother/\" + id));\n\n            case 4:\n              response = _context.sent;\n\n              if (response.ok) {\n                _context.next = 9;\n                break;\n              }\n\n              problem = getGeneralApiProblem(response);\n\n              if (!problem) {\n                _context.next = 9;\n                break;\n              }\n\n              return _context.abrupt(\"return\", problem);\n\n            case 9:\n              console.log('retorno da api', response.data);\n              brothers = response.data;\n              return _context.abrupt(\"return\", {\n                kind: \"ok\",\n                brothers: brothers\n              });\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](0);\n              return _context.abrupt(\"return\", {\n                kind: \"bad-data\"\n              });\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 14]], Promise);\n    }\n  }]);\n\n  return BrotherApi;\n}();","map":{"version":3,"sources":["/Users/juanpimentel/Documents/mviewer/FrontEnd/MasonScan/app/services/api/brother-api.ts"],"names":["getGeneralApiProblem","BrotherApi","api","id","console","log","apisauce","get","response","ok","problem","data","brothers","kind"],"mappings":";;;AAEA,SAASA,oBAAT;AAIA,WAAaC,UAAb;AAGE,sBAAYC,GAAZ,EAAsB;AAAA;;AACpB,SAAKA,GAAL,GAAWA,GAAX;AACD;;AALH;AAAA;AAAA,WAOE,oBAAiBC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIC,cAAAA,OAAO,CAACC,GAAR,yBAA+BF,EAA/B;AAFJ;AAAA,+CAI2C,KAAKD,GAAL,CAASI,QAAT,CAAkBC,GAAlB,eAAkCJ,EAAlC,CAJ3C;;AAAA;AAIQK,cAAAA,QAJR;;AAAA,kBAOOA,QAAQ,CAACC,EAPhB;AAAA;AAAA;AAAA;;AAQUC,cAAAA,OARV,GAQoBV,oBAAoB,CAACQ,QAAD,CARxC;;AAAA,mBASQE,OATR;AAAA;AAAA;AAAA;;AAAA,+CASwBA,OATxB;;AAAA;AAYEN,cAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BG,QAAQ,CAACG,IAAvC;AAGQC,cAAAA,QAfV,GAeqBJ,QAAQ,CAACG,IAf9B;AAAA,+CAiBW;AAAEE,gBAAAA,IAAI,EAAE,IAAR;AAAcD,gBAAAA,QAAQ,EAARA;AAAd,eAjBX;;AAAA;AAAA;AAAA;AAAA,+CAmBW;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAnBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPF;;AAAA;AAAA","sourcesContent":["import { ApiResponse } from \"apisauce\"\nimport { Api } from \"./api\"\nimport { getGeneralApiProblem } from \"./api-problem\"\nimport { GetBrothersResult } from \"./api.types\"\n\n\nexport class BrotherApi {\n  private api: Api\n\n  constructor(api: Api) {\n    this.api = api\n  }\n\n  async getBrother(id: string): Promise<GetBrothersResult> {\n    try {\n      console.log(`pr√© chamada. ID ${id}`)\n    // make the api call\n    const response: ApiResponse<any> = await this.api.apisauce.get(`/brother/${id}`)\n\n    // the typical ways to die when calling an api\n    if (!response.ok) {\n      const problem = getGeneralApiProblem(response)\n      if (problem) return problem\n    }\n\n    console.log('retorno da api', response.data)\n    // transform the data into the format we are expecting\n    \n      const brothers = response.data\n      \n      return { kind: \"ok\", brothers }\n    } catch {\n      return { kind: \"bad-data\" }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}